# -*- coding: utf-8 -*-
"""intelligentMatch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EUfhz3sBozyu0tWdN5L3lERofHKRWke0
"""

import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
import imutils as imut
import cv2
from skimage.metrics import structural_similarity
import matplotlib.pyplot as plt

def check_fault(input,reference_image):
  img1 = cv2.cvtColor(input, cv2.COLOR_BGR2GRAY)
  img2 = cv2.cvtColor(reference_image, cv2.COLOR_BGR2GRAY)

  orb = cv2.ORB_create(50)
  kp1, des1 = orb.detectAndCompute(img1, None) 
  kp2, des2 = orb.detectAndCompute(img2, None)


  # matcher = cv2.DescriptorMatcher_create(cv2.DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING)
  matcher = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck = True)
  matches = matcher.match(des1, des2, None) 

  matches = sorted(matches, key = lambda x:x.distance)

  orb_img = cv2.drawMatches(input,kp1, reference_image, kp2, matches[:10], None)
  
  total_similar_points = [point for point in matches if point.distance < 50]

  orb_score = len(total_similar_points) / len(matches)

  points1 = np.zeros((len(matches), 2), dtype=np.float32)
  points2 = np.zeros((len(matches), 2), dtype=np.float32)

  for i, match in enumerate(matches):
    points1[i, :] = kp1[match.queryIdx].pt 
    points2[i, :] = kp2[match.trainIdx].pt 
    
  h, mask = cv2.findHomography(points1, points2, cv2.RANSAC)

  height, width, channels = reference_image.shape
  img1Reg = cv2.warpPerspective(input, h, (width, height))

  sift = cv2.SIFT_create()

  kp_1, des_1 = sift.detectAndCompute(img2, None)
  kp_2, des_2 = sift.detectAndCompute(img1, None)
  sift_matcher = cv2.BFMatcher(cv2.NORM_L2, crossCheck = False)

  sift_matches = sift_matcher.match(des_1, des_2)
  total_sift_similar_points = [point for point in sift_matches if point.distance < 50]
  # sift_img = cv2.drawMatches(reference_image,kp_1, input, kp_2, sift_matches, None)
  sift_img = cv2.drawMatches(reference_image,kp_1, input, kp_2, sift_matches[:50], input, flags = 2)
  sift_score = len(total_sift_similar_points) / len(sift_matches)
  return orb_score, sift_score, orb_img, sift_img,img1Reg
  # return orb_score, sift_score, orb_img, sift_img

def plt_show(img):
  plt.figure(figsize=(30, 20))
  # plt.imshow(orb_img)
  plt.imshow(img)
  plt.axis(False)
  plt.show()

def mark_defects(registered_input_rgb,reference_image_rgb):
  reference_image = cv2.cvtColor(reference_image_rgb, cv2.COLOR_BGR2GRAY)
  registered_input = cv2.cvtColor(registered_input_rgb, cv2.COLOR_BGR2GRAY)
  diff = cv2.absdiff(registered_input, reference_image)
  ret,diffthresh = cv2.threshold(diff,150,255,0)
  cv2_imshow(diffthresh)
  kernel = np.ones((4,4), np.uint8)
  dilate_image = cv2.dilate(diffthresh, kernel, iterations = 2)
  cv2_imshow(dilate_image)
  contours = cv2.findContours(dilate_image.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
  contours = imut.grab_contours(contours)
  for contour in contours:
    if cv2.contourArea(contour)>50:
      a,b,x,y = cv2.boundingRect(contour)
      cv2.rectangle(registered_input_rgb, (a,b), (a+x, b+y), (255,0,0),3)
      cv2.rectangle(reference_image_rgb, (a,b), (a+x, b+y), (255,0,0),3)
  x = np.zeros((360,10,3), np.uint8)
  result = np.hstack((registered_input_rgb, reference_image_rgb))
  cv2_imshow(result)

input = cv2.imread("Element_Optimised_Colour_ShapeLin.png")
reference_image = cv2.imread("reference.png")

# reference_image_gray = cv2.cvtColor(reference_image, cv2.COLOR_BGR2GRAY)
# input_gray = cv2.cvtColor(input, cv2.COLOR_BGR2GRAY)

orb_score, sift_score, orb_img, sift_img, registered_input=check_fault(input,reference_image)
# orb_score, sift_score, orb_img, sift_img=check_fault(reference_image,input)
# im2 = cv2.resize(im2, (1250, 450), interpolation = cv2.INTER_LINEAR)
# orb_score, orb_img=check_fault(im1,im2)
# plt.figure(figsize=(30, 20))
# plt.imshow(orb_img)
# plt.imshow(sift_img)
# plt.axis(False)
# plt.show()
# cv2_imshow(registered_input)
if orb_score < 0.84 and sift_score < 0.065:
  print("Faulty Image")
  print(f"ORB Value is {orb_score} and ORB Comparison in reference image and input image")
  plt_show(orb_img)
  print(f"SIFT Value is {sift_score} and SIFT Comparison in reference image and input image")
  plt_show(sift_img)
  mark_defects(registered_input,reference_image)
else:
  print(f"Perfect Image : ORB Value is {orb_score} and SIFT Value is {sift_score}")

input = cv2.imread("MeshFlowLin.png")
reference_image = cv2.imread("reference.png")
orb_score, sift_score, orb_img, sift_img, registered_input=check_fault(input,reference_image)
if orb_score < 0.84 or sift_score < 0.065:
  print("Faulty Image")
  print(f"ORB Value is {orb_score} and ORB Comparison in reference image and input image")
  plt_show(orb_img)
  print(f"SIFT Value is {sift_score} and SIFT Comparison in reference image and input image")
  plt_show(sift_img)
  mark_defects(registered_input,reference_image)
else:
  print(f"Perfect Image : ORB Value is {orb_score} and SIFT Value is {sift_score}")

input = cv2.imread("penetration_checkLin.png")
reference_image = cv2.imread("reference.png")
orb_score, sift_score, orb_img, sift_img, registered_input=check_fault(input,reference_image)
if orb_score < 0.84 and sift_score < 0.065:
  print("Faulty Image")
  print(f"ORB Value is {orb_score} and ORB Comparison in reference image and input image")
  plt_show(orb_img)
  print(f"SIFT Value is {sift_score} and SIFT Comparison in reference image and input image")
  plt_show(sift_img)
  mark_defects(registered_input,reference_image)
else:
  print(f"Perfect Image : ORB Value is {orb_score} and SIFT Value is {sift_score}")

input = cv2.imread("penetration_checkLinLow.png")
reference_image = cv2.imread("reference.png")
orb_score, sift_score, orb_img, sift_img, registered_input=check_fault(input,reference_image)
if orb_score < 0.8 and sift_score < 0.065:
  print("Faulty Image")
  print(f"ORB Value is {orb_score} and ORB Comparison in reference image and input image")
  plt_show(orb_img)
  print(f"SIFT Value is {sift_score} and SIFT Comparison in reference image and input image")
  plt_show(sift_img)
  # mark_defects(registered_input,reference_image)
else:
  print(f"Perfect Image : ORB Value is {orb_score} and SIFT Value is {sift_score}")



input = cv2.imread("2ndOrderElements.png")
reference_image = cv2.imread("Orginal.png")
orb_score, sift_score, orb_img, sift_img, registered_input=check_fault(input,reference_image)
if orb_score > 0.8 and sift_score > 0.01:
  print("Faulty Image")
  print(f"ORB Value is {orb_score} and ORB Comparison in reference image and input image")
  plt_show(orb_img)
  print(f"SIFT Value is {sift_score} and SIFT Comparison in reference image and input image")
  plt_show(sift_img)
  # mark_defects(registered_input,reference_image)
else:
  print(f"Perfect Image : ORB Value is {orb_score} and SIFT Value is {sift_score}")

input = cv2.imread("Scaled.png")
reference_image = cv2.imread("Orginal.png")
orb_score, sift_score, orb_img, sift_img, registered_input=check_fault(input,reference_image)
if orb_score > 0.8 and sift_score > 0.01:
  print("Faulty Image")
  print(f"ORB Value is {orb_score} and ORB Comparison in reference image and input image")
  plt_show(orb_img)
  print(f"SIFT Value is {sift_score} and SIFT Comparison in reference image and input image")
  plt_show(sift_img)
  # mark_defects(registered_input,reference_image)
else:
  print(f"Perfect Image : ORB Value is {orb_score} and SIFT Value is {sift_score}")

input = cv2.imread("Orginal_Lin.png")
reference_image = cv2.imread("Orginal.png")
orb_score, sift_score, orb_img, sift_img, registered_input=check_fault(input,reference_image)
if orb_score > 0.8 and sift_score > 0.01:
  print("Faulty Image")
  print(f"ORB Value is {orb_score} and ORB Comparison in reference image and input image")
  plt_show(orb_img)
  print(f"SIFT Value is {sift_score} and SIFT Comparison in reference image and input image")
  plt_show(sift_img)
  # mark_defects(registered_input,reference_image)
else:
  print(f"Perfect Image : ORB Value is {orb_score} and SIFT Value is {sift_score}")

input = cv2.imread("Orginal_Lin_Low.png")
reference_image = cv2.imread("Orginal.png")
orb_score, sift_score, orb_img, sift_img, registered_input=check_fault(input,reference_image)
if orb_score > 0.8 and sift_score > 0.01:
  print("Faulty Image")
  print(f"ORB Value is {orb_score} and ORB Comparison in reference image and input image")
  plt_show(orb_img)
  print(f"SIFT Value is {sift_score} and SIFT Comparison in reference image and input image")
  plt_show(sift_img)
  # mark_defects(registered_input,reference_image)
else:
  print(f"Perfect Image : ORB Value is {orb_score} and SIFT Value is {sift_score}")