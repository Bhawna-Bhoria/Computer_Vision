# -*- coding: utf-8 -*-
"""M22MA003_Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qkqmuk9kS-xOMeClryrBav7oePmAxmfq
"""

import numpy as np
import cv2 as cv2
from google.colab.patches import cv2_imshow
import math

img1 =cv2.imread("/content/clock_1.png")
cv2_imshow(img1)

h , w, c = img1.shape
print(h,w)
gray = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
edges1 = cv2.Canny(gray,50,200,None,3)
cv2_imshow(edges1)
lines1 = cv2.HoughLines(edges1, 1, np.pi / 180, 50, None,0,0)
lines_1 = np.vstack((lines1[1],lines1[9]))

print(lines_1)
print(len(lines1))

img2 =cv2.imread("/content/clock_2.jpg")
cv2_imshow(img2)

h , w, c = img2.shape
print(h,w)
gray = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
edges2 = cv2.Canny(gray,50,200,None,3)
lines2 = cv2.HoughLines(edges2, 1, np.pi / 180, int(h/4), None, 0, 0)
lines_2 = np.vstack((lines2[0],lines2[1]))
print(lines2)
print(len(lines2))

def getLines(img):
  h , w, c = img.shape
  print(h,w)
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  edges = cv2.Canny(gray,50,200,None,3)
  lines = cv2.HoughLines(edges, 1, np.pi / 180, int(h/3.35), None, 0, 0)
  print(lines)
  print(len(lines))
  return edges,lines

def findAngle(lines):
  if lines is not None:
        theta1 = lines[0][1]
        theta2 = lines[1][1]
        in_angle = math.degrees(abs(theta1-theta2))
        out_angle = 360-in_angle
        print("Angles between minute hand and hour hand are")
        print(f"in_angle is {in_angle:.1f} degrees")
        print(f"out_angle is {out_angle:.1f} degrees")

def showLines(edges, lines):
  cdst = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
  dist=[] 
  slope=[]
  if lines is not None:
      for i in range(0, len(lines)):
          rho = lines[i][0]
          theta = lines[i][1]
          a = math.cos(theta)
          b = math.sin(theta)
          x0 = a * rho
          y0 = b * rho
          x1,y1 = (int(x0 + 1000*(-b)), int(y0 + 1000*(a)))
          x2,y2 = (int(x0 - 1000*(-b)), int(y0 - 1000*(a)))
          d=(((x1-x2)**2 + (y1-y2)**2)**0.5)
          dist.append(d)
          if((x2-x1)and (x1-x2))==0:
            m=1.57
          else:
            m=abs(y2-y1)//abs(x2-x1)
          slope.append(m)
          print(x1,x2,y1,y2)
          cv2.line(cdst, (x1,y1), (x2,y2), (0,0,255), 3, cv2.LINE_AA)
          # print(pt1,pt2)
          cv2_imshow(cdst)

# edges1, lines1 = getLines(img1)
showLines(edges1, lines_1)

# edges2, lines2 = getLines(img2)
showLines(edges2, lines_2)

findAngle(lines_1)

findAngle(lines_2)