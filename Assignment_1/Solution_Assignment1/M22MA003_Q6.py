# -*- coding: utf-8 -*-
"""M22MA003_Q6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aj0AeSf6HLUb0uARlsPfT_l3X_lvhVij
"""

import matplotlib.pyplot as plt
import cv2
import numpy as np
import glob
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from google.colab.patches import cv2_imshow

from google.colab import drive
drive.mount('/content/gdrive')
# corpus = os.path.join("14ksNbln0Dcu86RokQ9T75c60_892Z8M8", GurNum-20230129T090104Z-001)
# train_dataset_path= '/content/gdrive/MyDrive/Gurmukhi/train'
# test_dataset_path= '/content/gdrive/MyDrive/Gurmukhi/val'

import numpy as np

# Function to generate horizontal projection profile
def getHorizontalProjectionProfile(image):

	# Convert black spots to ones
	image[image == 0] = 1
	# Convert white spots to zeros
	image[image == 255] = 0

	horizontal_projection = np.sum(image, axis = 1)

	return horizontal_projection
def createHPArray(path):
  arrlist = []
  for img in glob.glob(path):
    image = cv2.imread(img,0)
    ret,thresh1 = cv2.threshold(image,127,255,cv2.THRESH_BINARY)
    horizontal_projection = getHorizontalProjectionProfile(thresh1.copy())
    arrlist.append(horizontal_projection)
  ndarr = np.array(arrlist).astype('int')
  return ndarr

xtest_0_path = "/content/gdrive/MyDrive/HorizontalProjection/testing/0/*.png"
xtest_0 = createHPArray(xtest_0_path)
xtest_1_path = "/content/gdrive/MyDrive/HorizontalProjection/testing/1/*.png"
xtest_1 = createHPArray(xtest_1_path)

x_test = np.vstack([xtest_0, xtest_1])


xtrain_0_path = "/content/gdrive/MyDrive/HorizontalProjection/training/0/*.png"
xtrain_0 = createHPArray(xtrain_0_path)
xtrain_1_path = "/content/gdrive/MyDrive/HorizontalProjection/training/1/*.png"
xtrain_1 = createHPArray(xtrain_1_path)

x_train = np.vstack([xtrain_0, xtrain_1])

y_0 = np.zeros(xtrain_0.shape[0]).astype('int')
y_1 = np.ones(xtrain_1.shape[0]).astype('int')
y_train = np.append(y_0, y_1)

ytest_0 = np.zeros(xtest_0.shape[0]).astype('int')
ytest_1 = np.ones(xtest_1.shape[0]).astype('int')
y_test = np.append(ytest_0, ytest_1)
y_test.shape

neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))
  
# Loop over K values
for i, k in enumerate(neighbors):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(x_train, y_train)
      
    # Compute training and test data accuracy
    train_accuracy[i] = knn.score(x_train, y_train)
    test_accuracy[i] = knn.score(x_test, y_test)
  
# Generate plot
plt.plot(neighbors, test_accuracy, label = 'Testing dataset Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training dataset Accuracy')
  
plt.legend()
plt.xlabel('n_neighbors')
plt.ylabel('Accuracy')
plt.show()

knn = KNeighborsClassifier(n_neighbors=2)
  
knn.fit(x_train, y_train)

# Predict on dataset which model has not seen before
print(knn.predict(x_test))

clf = SVC(kernel='linear') 
clf.fit(x_train, y_train)

clf.predict(x_test)

print(f"KNN Accuracy with 2 neighbours is {knn.score(x_test, y_test)*100}%")

print(f"SVM Accuracy is {clf.score(x_test,y_test)*100}%")

img=cv2.imread("/content/gdrive/MyDrive/HorizontalProjection/testing/0/10.png")
cv2_imshow(img)
y=knn.predict([x_test[0]])
print(f"predicted value of the image is {y}")

img=cv2.imread("/content/gdrive/MyDrive/HorizontalProjection/testing/1/107.png")
cv2_imshow(img)
y=clf.predict([x_test[20]])
print(f"predicted value of the image is {y}")