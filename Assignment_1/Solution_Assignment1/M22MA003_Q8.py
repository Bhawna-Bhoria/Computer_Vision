# -*- coding: utf-8 -*-
"""M22MA003_Q8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ynnK7w73VNfwkQAH_NxKRtv3hy4g7i4P
"""

!pip install easyocr

import cv2
import easyocr
import numpy as np
import matplotlib.pyplot as plt
from pylab import rcParams
from IPython.display import Image
rcParams['figure.figsize']=8,16
from google.colab.patches import cv2_imshow

img1 = cv2.imread('/content/Name.jpg',1)
cv2_imshow(img1)

template = cv2.imread('/content/Template.jpg',1)
cv2_imshow(template)

# Python program to illustrate
# template matching
import cv2
import numpy as np
  
# Read the main image
img1 = cv2.imread('/content/Name.jpg',1)
cv2_imshow(img1)
# Convert it to grayscale
img_gray = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
  
# Read the template
template = cv2.imread('/content/Template.jpg',0)
# template = template[150:450,100:300]
# template = cv2.resize(template,(110,120))
# print(type(template))
cv2_imshow(template)
# Store width and height of template in w and h
w, h = template.shape[::-1]
# print(w,h)
# Perform match operations.
res = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)
  
# Specify a threshold
threshold = 0.9
  
# Store the coordinates of matched area in a numpy array
loc = np.where(res >= threshold)
  
# Draw a rectangle around the matched region.
for pt in zip(*loc[::-1]):
    cv2.rectangle(img1, pt, (pt[0] + w, pt[1] + h), (0, 255, 255), 2)
  
# Show the final image with the matched area.
cv2_imshow(img1)



