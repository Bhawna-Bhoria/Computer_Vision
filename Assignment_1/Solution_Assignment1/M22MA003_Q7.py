# -*- coding: utf-8 -*-
"""M22MA003_Q7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I-fbJMnp4XKkiAtS1Tn_o3V-O_bG0Adm
"""

!pip install easyocr

import matplotlib.pyplot as plt
import cv2
import numpy as np
import easyocr
from pylab import rcParams
from IPython.display import Image
rcParams['figure.figsize'] =8,16
from PIL import Image
from google.colab.patches import cv2_imshow
# from PIL import Image, ImageDraw, ImageFont
# img = Image.open('11_1.png')
# print(type(img))
# def draw_boxes(image, bounds, color='yellow', width=2):
#   draw = ImageDraw.Draw(image)
#   for cord in cords:
#     p0, p1, p2, p3 = cord[0]
#     draw.line([*p0, *p1, *p2, *p3, *p0], fill=color, width=width)
#   return image
# draw_boxes(img, cords)

import easyocr
reader = easyocr.Reader(['en'])

img = Image.open('11_1.png')
width = img.width
height = img.height
  
# display width and height
print("The height of the image is: ", height)
print("The width of the image is: ", width)

img1 = cv2.imread('11_1.png',0)
cv2_imshow(img1)
# img = cv2.imread('27_2.png',0)
# laplacian = cv2.Laplacian(img,cv2.CV_64F)
# plt.subplot(2,2,2),plt.imshow(laplacian,cmap = 'gray')
# plt.title('Laplacian'), plt.xticks([]), plt.yticks([])
# plt.show()

ret,thresh2 = cv2.threshold(img1,127,255,cv2.THRESH_BINARY_INV)
plt.subplot(2,2,2),plt.imshow(thresh2,'gray',vmin=0,vmax=255)
plt.title('Binary_inv'), plt.xticks([]), plt.yticks([])
plt.show()

sobelX = cv2.Sobel(img1, cv2.CV_64F, 1, 0)
sobelY = cv2.Sobel(img1, cv2.CV_64F, 0, 1)

# print(len(sobelX),len(sobelY))
# print(len(sobelX[0]),len(sobelY[0]))
# print(sobelX,sobelY)

n=int(height/2)
# print(n)
# print(sobelX[n])
for i in range(len(sobelX[n])):
  if sobelX[n][i]>sobelX[n][i+1]:
    print("Dark backgorund")
    break
  elif sobelX[n][i]<sobelX[n][i+1]:
    print("Light backgorund")
    break
# sobelX = np.uint8(np.absolute(sobelX))
# sobelY = np.uint8(np.absolute(sobelY))

# titles = ['Original Image','sobelX','sobelY']
# images = [img,sobelX, sobelY]
# for i in range(3):
#     plt.subplot(2,3,i+1),plt.imshow(images[i],'gray',vmin=0,vmax=255)
#     plt.title(titles[i])
#     plt.xticks([]),plt.yticks([])
# plt.show()

img = Image.open('27_2.png')
w = img.width
h = img.height
  
# display width and height
print("The height of the image is: ", h)
print("The width of the image is: ", h)

img2 = cv2.imread('27_2.png',0)
cv2_imshow(img2)
# img = cv2.imread('27_2.png',0)
# laplacian = cv2.Laplacian(img,cv2.CV_64F)
# plt.subplot(2,2,2),plt.imshow(laplacian,cmap = 'gray')
# plt.title('Laplacian'), plt.xticks([]), plt.yticks([])
# plt.show()

ret,thresh2 = cv2.threshold(img2,127,255,cv2.THRESH_BINARY_INV)
plt.subplot(2,2,2),plt.imshow(thresh2,'gray',vmin=0,vmax=255)
plt.title('Binary_inv'), plt.xticks([]), plt.yticks([])
plt.show()

sobelY = cv2.Sobel(img2, cv2.CV_64F, 1, 0)
sobelX = cv2.Sobel(img2, cv2.CV_64F, 0, 1)

# print(len(sobelX),len(sobelY))
# print(len(sobelX[0]),len(sobelY[0]))
# print(sobelX,sobelY)

n=int(h/2)
# print(n)
# print(sobelX[n])
for i in range(len(sobelX[n])):
  if sobelX[n][i]<sobelX[n][i+1]:
    print("Dark backgorund")
    break
  elif sobelX[n][i]>sobelX[n][i+1]:
    print("Light backgorund")
    break
# sobelX = np.uint8(np.absolute(sobelX))
# sobelY = np.uint8(np.absolute(sobelY))

# titles = ['Original Image','sobelX','sobelY']
# images = [img,sobelX, sobelY]
# for i in range(3):
#     plt.subplot(2,3,i+1),plt.imshow(images[i],'gray',vmin=0,vmax=255)
#     plt.title(titles[i])
#     plt.xticks([]),plt.yticks([])
# plt.show()

