# -*- coding: utf-8 -*-
"""M22MA003_CV_Assign3_Question1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11W0OSpYb02TYIRIJOycv87G9KDnUT8j1

# Top K Eigen's Faces
"""

from sklearn.decomposition import PCA
import cv2
import matplotlib.pyplot as plt
import numpy as np
from google.colab.patches import cv2_imshow
import os
from google.colab.patches import cv2_imshow
import glob 
from skimage.metrics import structural_similarity as stsim

#Mounting Google drive
from google.colab import drive
drive.mount('/content/drive')

#unzipping the data.zip file
!unzip -qq /content/drive/MyDrive/CV_Assign3/data.zip

path = "/content/face-lfw-train"
test_image_path = "/content/1.jpeg"
pca_count=11
def get_train_images(path):
    input_images = path
    data_path = os.path.join(input_images,'*g') 
    dir = glob.glob(data_path) 
    X_train = [] 
    for file in dir: 
      x = cv2.imread(file)
      X_train.append(x)
    cricketer=cv2.imread(test_image_path)
    X_train.append(cricketer)
    X_train=np.asarray(X_train)
    return X_train

def get_mean_train(X_train):
  X_gray=[]
  for idx in range(X_train.shape[0]):
    X_image_gray = cv2.cvtColor(X_train[idx], cv2.COLOR_BGR2GRAY)
    X_image_gray= cv2.resize(X_image_gray, (100, 100))
    X_gray.append(X_image_gray)
  X_gray=np.asarray(X_gray)
  X_gray=X_gray.reshape(X_gray.shape[0],-1)
  arr_mean=np.mean(X_gray,axis=0)
  mean_image=arr_mean.reshape(100,100)
  cv2_imshow(mean_image)
  return X_gray,arr_mean,mean_image

def plot_ef(diff_array_test,top_ef,arr_mean):
  for i in range(0,13):
    top_ef_k=top_ef[:i]
    result=np.dot(diff_array_test,top_ef_k.T)
    print(result.shape)
    reg_img=np.dot(result,top_ef_k)
    reconstd_img=reg_img.reshape(100,100)
    calculate_MSE(reconstd_img,arr_mean)
    # print(dot_test.shape)
    # distances = np.linalg.norm(cov - dot_test, axis=1)
    result_ef=np.dot(result,top_ef_k)
    result_ef.shape
    final_ef=result_ef.reshape(100,100)
    print(f"When Eigen Face count taken is: {i}")
    cv2_imshow(final_ef)
    # return final_ef

def calculate_MSE(input_image,test_img1):
    mse = np.mean((input_image - test_img1)**2)
    print(f"MSE value is:{mse:.2f}")
    stsim_val = stsim(test_img1, input_image, data_range=input_image.max() - input_image.min())
    print(f"Structural Similarity Index Metric (SSIM):{stsim_val:.2f}")

def show_eigen_face(num_ef,ef):
  # num_ef=5
  fig, axes = plt.subplots(1, num_ef, figsize=(10, 4))
  for face in range(num_ef):
      axes[face].imshow(ef[face].reshape(100,100), cmap='gray')
      axes[face].axis('off')
  plt.suptitle(f'Top {num_ef} Eigenfaces')
  plt.show()
def get_mean_test(test_image_path):
  X_test=cv2.imread(test_image_path)
  X_test_gray= cv2.cvtColor(X_test, cv2.COLOR_RGB2GRAY)
  X_test_gray=cv2.resize(X_test_gray,(100,100))
  X_testgray=X_test_gray.reshape(1,-1)
  test_arr_mean=np.mean(X_testgray)
  diff_array_test=X_testgray-test_arr_mean
  return diff_array_test

X_train = get_train_images(path)
print("Cricketer image is :-")
cv2_imshow(X_train[10])
print()
print("Mean Image is :-")
print(X_train.shape[0])
X_gray,arr_mean,mean_image = get_mean_train(X_train)

diff_array=X_gray-arr_mean
print(diff_array.shape)
cv2_imshow(diff_array[0].reshape(100,100))
covariance=(np.dot(diff_array.T,diff_array))/11
covariance.shape

obj_pca = PCA(n_components=100)
obj_pca.fit(covariance)
top_ef = obj_pca.components_[:pca_count]

ef = top_ef.reshape((11, 100,100))
plt.imshow(ef[9],cmap='gray')

num_ef=7
show_eigen_face(num_ef,ef)

diff_array_test=get_mean_test(test_image_path)
diff_array_test

plot_ef(diff_array_test,top_ef,mean_image)

