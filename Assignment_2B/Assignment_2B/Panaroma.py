# -*- coding: utf-8 -*-
"""Panaroma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QMqtnA_aLAg9ZyUTuq1--SM-U0Jy62Zi
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
import imutils

image1 = cv2.imread('/content/1a.jpeg')
image2 = cv2.imread('/content/1b.jpeg')
image3 = cv2.imread('/content/1c.jpeg')
image3=imutils.rotate(image3, angle=4)
image2=cv2.resize(image2,(372,349))
image3=cv2.resize(image3,(372,349))
image1=cv2.resize(image1,(372,349))
image2=image2[0:372,110:349]
image3=image3[9:372,150:349]

gray_image1 = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)
gray_image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2GRAY)
gray_image3 = cv2.cvtColor(image3, cv2.COLOR_BGR2GRAY)

()# Brute-Force Matching with ORB Descriptors
def merge_image(img1,img2,gray1,gray2):

  orb = cv2.ORB_create(50)
  kp1, des1 = orb.detectAndCompute(gray1, None)
  kp2, des2 = orb.detectAndCompute(gray2, None)
  matcher = cv2.DescriptorMatcher_create(cv2.DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING)
  matches = matcher.match(des1, des2, None)
  matches = sorted(matches, key = lambda x:x.distance)
  result = cv2.drawMatches(img1,kp1, img2, kp2, matches[:10], None)

  points1 = np.zeros((len(matches), 2), dtype=np.float32)
  points2 = np.zeros((len(matches), 2), dtype=np.float32)

  for i, match in enumerate(matches):
    points1[i, :] = kp1[match.queryIdx].pt 
    points2[i, :] = kp2[match.trainIdx].pt 
    
  h, mask = cv2.findHomography(points1, points2, cv2.RANSAC)
  
  height, width, channels = img2.shape
  im1Reg = cv2.warpPerspective(img1, h, (width, height)) 
  cv2_imshow(result)
  return result

result1 = merge_image(image1,image2,gray_image1,gray_image2)
resultgray1 = cv2.cvtColor(result1, cv2.COLOR_BGR2GRAY)
result2 = merge_image(result1,image3,resultgray1,gray_image3)

